from collections import Counter
from collections import defaultdict
from collections import OrderedDict
from collections import namedtuple

# -----------------------------------------------------------------------------
# COUNTER
list_of_repeated_ints = [1, 1, 1, 2, 2, 2, 3, 4, 4, 1, 1, 2, 2, 5, 666, 3, 2, 2]
# Counter will produce a dict of value/count pairs
print(Counter(list_of_repeated_ints))
# Also works with characters in a string
print(Counter("A snake says SSSSSSSSSSSS!".upper()))
# Also works on a list of strings
string_with_repeated_words = "speaking of wood how much wood would a woodchuck chuck if a woodchuck could chuck wood"
print(Counter(string_with_repeated_words.upper().split()))

my_string_counter = Counter(string_with_repeated_words.upper().split())
# Get 5 most common keys in the Counter
print(my_string_counter.most_common(5))
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# DEFAULT DICTIONARY
# A defaultdict will never raise a KeyError. It will simply return the value generated by the default factory
# when a requested key does not exist in the dict.

# Provide an explicit lambda function that creates a default value string
dd_a = defaultdict(lambda: "this string is the default value")
# The following line would have caused a KeyError if I used a standard dict
dd_a[1]
dd_a[2] = 'two'
print(dd_a)

# Provide reference to the 'object' constructor so default value will be a dummy object
dd_b = defaultdict(object)
dd_b[1]
dd_b[2] = 'two'
print(dd_b)

# Provide an explicit lambda function that always returns the None object as the default value
dd_c = defaultdict(lambda: None)
dd_c[1]
dd_c[2] = 'two'
print(dd_c)
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# ORDERED DICTIONARY
# Type of dict that remembers the original order that items were added.
d = OrderedDict()
d['first'] = 1
d['second'] = 2
d['third'] = 3
d['fourth'] = 4
d['fifth'] = 5
d['sixth'] = 6
print(d)
for k, v in d.items():
    print(k, v)

od2 = OrderedDict()
od2['sixth'] = 6
od2['fifth'] = 5
od2['fourth'] = 4
od2['third'] = 3
od2['second'] = 2
od2['first'] = 1
print(od2)

# Notice that order is considered when checking equality
print(d == od2)
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# NAMED TUPLE
# Allows you to create a new custom container class with attribute names
# that you specify

# Creates a simple container class named 'Dog'
# with attributes 'name', 'breed', and 'age'
Dog = namedtuple('Dog', 'name breed age')
otto = Dog(age='2', breed='Frenchton', name='Otto')
spot = Dog(age='7', breed='mixed breed', name='Spot')
for dog in [otto, spot]:
    print("{} is a {} year old {}.".format(dog.name, dog.age, dog.breed))
# -----------------------------------------------------------------------------
